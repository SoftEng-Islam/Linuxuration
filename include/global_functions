#!/usr/bin/env bash
# This is NOT a script for execution, but for loading functions, so NOT need execution permission.
# NOTE that you NOT need to `cd ..' because the `$0' is NOT this file, but the script file which will source this file.

# The script that use this file should have two lines on its top as follows:
# cd "$(dirname "$0")"
# export base="$(pwd)"

function try { "$@" || sleep 0; }
function v() {
	echo -e "####################################################"
	echo -e "\e[34m[$0]: Next command:\e[0m"
	echo -e "\e[32m$@\e[0m"
	execute=true
	if $ask; then
		while true; do
			echo -e "\e[34mExecute? \e[0m"
			echo "  y = Yes"
			echo "  e = Exit now"
			echo "  s = Skip this command (NOT recommended - your setup might not work correctly)"
			echo "  yesforall = Yes and don't ask again; NOT recommended unless you really sure"
			read -p "====> " p
			case $p in
			[yY])
				echo -e "\e[34mOK, executing...\e[0m"
				break
				;;
			[eE])
				echo -e "\e[34mExiting...\e[0m"
				exit
				break
				;;
			[sS])
				echo -e "\e[34mAlright, skipping this one...\e[0m"
				execute=false
				break
				;;
			"yesforall")
				echo -e "\e[34mAlright, won't ask again. Executing...\e[0m"
				ask=false
				break
				;;
			*) echo -e "\e[31mPlease enter [y/e/s/yesforall].\e[0m" ;;
			esac
		done
	fi
	if $execute; then x "$@"; else
		echo -e "\e[33m[$0]: Skipped \"$@\"\e[0m"
	fi
}
# When use v() for a defined function, use x() INSIDE its definition to catch errors.
function x() {
	if "$@"; then cmdstatus=0; else cmdstatus=1; fi # 0=normal; 1=failed; 2=failed but ignored
	while [ $cmdstatus == 1 ]; do
		echo -e "\e[31m[$0]: Command \"\e[32m$@\e[31m\" has failed."
		echo -e "You may need to resolve the problem manually BEFORE repeating this command.\e[0m"
		echo "  r = Repeat this command (DEFAULT)"
		echo "  e = Exit now"
		echo "  i = Ignore this error and continue (your setup might not work correctly)"
		read -p " [R/e/i]: " p
		case $p in
		[iI])
			echo -e "\e[34mAlright, ignore and continue...\e[0m"
			cmdstatus=2
			;;
		[eE])
			echo -e "\e[34mAlright, will exit.\e[0m"
			break
			;;
		*)
			echo -e "\e[34mOK, repeating...\e[0m"
			if "$@"; then cmdstatus=0; else cmdstatus=1; fi
			;;
		esac
	done
	case $cmdstatus in
	0) echo -e "\e[34m[$0]: Command \"\e[32m$@\e[34m\" finished.\e[0m" ;;
	1)
		echo -e "\e[31m[$0]: Command \"\e[32m$@\e[31m\" has failed. Exiting...\e[0m"
		exit 1
		;;
	2) echo -e "\e[31m[$0]: Command \"\e[32m$@\e[31m\" has failed but ignored by user.\e[0m" ;;
	esac
}
function showfun() {
	echo -e "\e[34m[$0]: The definition of function \"$1\" is as follows:\e[0m"
	printf "\e[32m"
	type -a $1
	printf "\e[97m"
}
function remove_bashcomments_emptylines() {
	mkdir -p $(dirname $2)
	cat $1 | sed -e '/^[[:blank:]]*#/d;s/#.*//' -e '/^[[:space:]]*$/d' >$2
}
function prevent_sudo_or_root() {
	case $(whoami) in
	root)
		echo -e "\e[31m[$0]: This script is NOT to be executed with sudo or as root. Aborting...\e[0m"
		exit 1
		;;
	esac
}

# ------------------------------------- #
# Function Check if pacman is available #
# ------------------------------------- #
# check if the pacman package manager is available on the system.
# If pacman is not found, it prints an error message indicating that
# the system is not Arch Linux or an Arch-based distribution,
# and then it exits the script with a status code of 1.
check_pacman() {
	if ! command -v pacman >/dev/null 2>&1; then
		printf "\e[31m[$0]: pacman not found, it seems that the system is not ArchLinux or Arch-based distros. Aborting...\e[0m\n"
		exit 1
	fi
	echo "pacman is found. Continuing with the script..."
}

# Function to check if yay is installed
check_yay() {
	if ! command -v yay &>/dev/null; then
		echo "yay is not installed. Please install yay and try again."
		exit 1
	fi
}
# Function to check if yay is installed and install it if not
check_yay() {
	if ! command -v yay &>/dev/null; then
		echo "yay is not installed. Installing yay..."

		# Install yay
		sudo pacman -S --needed base-devel git

		# Clone the yay repository from the AUR
		git clone https://aur.archlinux.org/yay.git

		# Change directory to yay
		cd yay

		# Build and install yay
		makepkg -si

		# Change back to the previous directory
		cd ..

		# Remove the yay directory
		rm -rf yay

		echo "yay has been successfully installed."
	else
		echo "yay is already installed."
	fi
}

# Function to confirm action
confirm() {
	read -p "$1 (y/n): " response
	if [[ "$response" != "y" && "$response" != "Y" ]]; then
		echo "Action cancelled."
		exit 1
	fi
}

# ------------------- #
# Update the Packages #
# ------------------- #
update_packages() {
	echo 'Update the Packages'
	sudo rm /var/lib/pacman/db.lck
	sudo pacman -Scc --noconfirm
	sudo pacman -Syu --noconfirm && sudo pacman -Sc --noconfirm && yay -Syu --noconfirm --devel
	sudo pacman -S --noconfirm linux-firmware
	sudo mkinitcpio -P
}
