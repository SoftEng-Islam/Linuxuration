import "./chunk-76J2PTFD.js";

// node_modules/@tauri-apps/api/chunk-FEIY7W7S.js
var d = Object.defineProperty;
var e = (c3, a3) => {
  for (var b2 in a3)
    d(c3, b2, { get: a3[b2], enumerable: true });
};

// node_modules/@tauri-apps/api/chunk-SELMD7YX.js
var u = {};
e(u, { convertFileSrc: () => d2, invoke: () => _, transformCallback: () => s });
function l() {
  return window.crypto.getRandomValues(new Uint32Array(1))[0];
}
function s(e2, r2 = false) {
  let n = l(), t = `_${n}`;
  return Object.defineProperty(window, t, { value: (o2) => (r2 && Reflect.deleteProperty(window, t), e2 == null ? void 0 : e2(o2)), writable: false, configurable: true }), n;
}
async function _(e2, r2 = {}) {
  return new Promise((n, t) => {
    let o2 = s((i) => {
      n(i), Reflect.deleteProperty(window, `_${c3}`);
    }, true), c3 = s((i) => {
      t(i), Reflect.deleteProperty(window, `_${o2}`);
    }, true);
    window.__TAURI_IPC__({ cmd: e2, callback: o2, error: c3, ...r2 });
  });
}
function d2(e2, r2 = "asset") {
  return window.__TAURI__.convertFileSrc(e2, r2);
}

// node_modules/@tauri-apps/api/chunk-J2IGCSS2.js
async function a(i) {
  return _("tauri", i);
}

// node_modules/@tauri-apps/api/chunk-5NWA45Z3.js
var W = {};
e(W, { TauriEvent: () => c, emit: () => D, listen: () => E, once: () => _2 });
async function s2(n, t) {
  return a({ __tauriModule: "Event", message: { cmd: "unlisten", event: n, eventId: t } });
}
async function m(n, t, r2) {
  await a({ __tauriModule: "Event", message: { cmd: "emit", event: n, windowLabel: t, payload: r2 } });
}
async function a2(n, t, r2) {
  return a({ __tauriModule: "Event", message: { cmd: "listen", event: n, windowLabel: t, handler: s(r2) } }).then((i) => async () => s2(n, i));
}
async function u2(n, t, r2) {
  return a2(n, t, (i) => {
    r2(i), s2(n, i.id).catch(() => {
    });
  });
}
var c = ((e2) => (e2.WINDOW_RESIZED = "tauri://resize", e2.WINDOW_MOVED = "tauri://move", e2.WINDOW_CLOSE_REQUESTED = "tauri://close-requested", e2.WINDOW_CREATED = "tauri://window-created", e2.WINDOW_DESTROYED = "tauri://destroyed", e2.WINDOW_FOCUS = "tauri://focus", e2.WINDOW_BLUR = "tauri://blur", e2.WINDOW_SCALE_FACTOR_CHANGED = "tauri://scale-change", e2.WINDOW_THEME_CHANGED = "tauri://theme-changed", e2.WINDOW_FILE_DROP = "tauri://file-drop", e2.WINDOW_FILE_DROP_HOVER = "tauri://file-drop-hover", e2.WINDOW_FILE_DROP_CANCELLED = "tauri://file-drop-cancelled", e2.MENU = "tauri://menu", e2.CHECK_UPDATE = "tauri://update", e2.UPDATE_AVAILABLE = "tauri://update-available", e2.INSTALL_UPDATE = "tauri://update-install", e2.STATUS_UPDATE = "tauri://update-status", e2.DOWNLOAD_PROGRESS = "tauri://update-download-progress", e2))(c || {});
async function E(n, t) {
  return a2(n, null, t);
}
async function _2(n, t) {
  return u2(n, null, t);
}
async function D(n, t) {
  return m(n, void 0, t);
}

// node_modules/@tauri-apps/api/chunk-O3VGRXBA.js
var S = {};
e(S, { CloseRequestedEvent: () => y, LogicalPosition: () => c2, LogicalSize: () => m2, PhysicalPosition: () => r, PhysicalSize: () => o, UserAttentionType: () => W2, WebviewWindow: () => s3, WebviewWindowHandle: () => u3, WindowManager: () => b, appWindow: () => g, availableMonitors: () => D2, currentMonitor: () => C, getAll: () => h, getCurrent: () => E2, primaryMonitor: () => T });
var m2 = class {
  constructor(e2, a3) {
    this.type = "Logical";
    this.width = e2, this.height = a3;
  }
};
var o = class {
  constructor(e2, a3) {
    this.type = "Physical";
    this.width = e2, this.height = a3;
  }
  toLogical(e2) {
    return new m2(this.width / e2, this.height / e2);
  }
};
var c2 = class {
  constructor(e2, a3) {
    this.type = "Logical";
    this.x = e2, this.y = a3;
  }
};
var r = class {
  constructor(e2, a3) {
    this.type = "Physical";
    this.x = e2, this.y = a3;
  }
  toLogical(e2) {
    return new c2(this.x / e2, this.y / e2);
  }
};
var W2 = ((a3) => (a3[a3.Critical = 1] = "Critical", a3[a3.Informational = 2] = "Informational", a3))(W2 || {});
function E2() {
  return new s3(window.__TAURI_METADATA__.__currentWindow.label, { skip: true });
}
function h() {
  return window.__TAURI_METADATA__.__windows.map((t) => new s3(t.label, { skip: true }));
}
var M = ["tauri://created", "tauri://error"];
var u3 = class {
  constructor(e2) {
    this.label = e2, this.listeners = /* @__PURE__ */ Object.create(null);
  }
  async listen(e2, a3) {
    return this._handleTauriEvent(e2, a3) ? Promise.resolve(() => {
      let n = this.listeners[e2];
      n.splice(n.indexOf(a3), 1);
    }) : a2(e2, this.label, a3);
  }
  async once(e2, a3) {
    return this._handleTauriEvent(e2, a3) ? Promise.resolve(() => {
      let n = this.listeners[e2];
      n.splice(n.indexOf(a3), 1);
    }) : u2(e2, this.label, a3);
  }
  async emit(e2, a3) {
    if (M.includes(e2)) {
      for (let n of this.listeners[e2] || [])
        n({ event: e2, id: -1, windowLabel: this.label, payload: a3 });
      return Promise.resolve();
    }
    return m(e2, this.label, a3);
  }
  _handleTauriEvent(e2, a3) {
    return M.includes(e2) ? (e2 in this.listeners ? this.listeners[e2].push(a3) : this.listeners[e2] = [a3], true) : false;
  }
};
var b = class extends u3 {
  async scaleFactor() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "scaleFactor" } } } });
  }
  async innerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerPosition" } } } }).then(({ x: e2, y: a3 }) => new r(e2, a3));
  }
  async outerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerPosition" } } } }).then(({ x: e2, y: a3 }) => new r(e2, a3));
  }
  async innerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerSize" } } } }).then(({ width: e2, height: a3 }) => new o(e2, a3));
  }
  async outerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerSize" } } } }).then(({ width: e2, height: a3 }) => new o(e2, a3));
  }
  async isFullscreen() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isFullscreen" } } } });
  }
  async isMinimized() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMinimized" } } } });
  }
  async isMaximized() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMaximized" } } } });
  }
  async isFocused() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isFocused" } } } });
  }
  async isDecorated() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isDecorated" } } } });
  }
  async isResizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isResizable" } } } });
  }
  async isMaximizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMaximizable" } } } });
  }
  async isMinimizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMinimizable" } } } });
  }
  async isClosable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isClosable" } } } });
  }
  async isVisible() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isVisible" } } } });
  }
  async title() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "title" } } } });
  }
  async theme() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "theme" } } } });
  }
  async center() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "center" } } } });
  }
  async requestUserAttention(e2) {
    let a3 = null;
    return e2 && (e2 === 1 ? a3 = { type: "Critical" } : a3 = { type: "Informational" }), a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "requestUserAttention", payload: a3 } } } });
  }
  async setResizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setResizable", payload: e2 } } } });
  }
  async setMaximizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMaximizable", payload: e2 } } } });
  }
  async setMinimizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMinimizable", payload: e2 } } } });
  }
  async setClosable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setClosable", payload: e2 } } } });
  }
  async setTitle(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setTitle", payload: e2 } } } });
  }
  async maximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "maximize" } } } });
  }
  async unmaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unmaximize" } } } });
  }
  async toggleMaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "toggleMaximize" } } } });
  }
  async minimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "minimize" } } } });
  }
  async unminimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unminimize" } } } });
  }
  async show() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "show" } } } });
  }
  async hide() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "hide" } } } });
  }
  async close() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "close" } } } });
  }
  async setDecorations(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setDecorations", payload: e2 } } } });
  }
  async setAlwaysOnTop(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setAlwaysOnTop", payload: e2 } } } });
  }
  async setContentProtected(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setContentProtected", payload: e2 } } } });
  }
  async setSize(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSize", payload: { type: e2.type, data: { width: e2.width, height: e2.height } } } } } });
  }
  async setMinSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMinSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setMaxSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMaxSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setFullscreen(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFullscreen", payload: e2 } } } });
  }
  async setFocus() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFocus" } } } });
  }
  async setIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIcon", payload: { icon: typeof e2 == "string" ? e2 : Array.from(e2) } } } } });
  }
  async setSkipTaskbar(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSkipTaskbar", payload: e2 } } } });
  }
  async setCursorGrab(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorGrab", payload: e2 } } } });
  }
  async setCursorVisible(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorVisible", payload: e2 } } } });
  }
  async setCursorIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorIcon", payload: e2 } } } });
  }
  async setCursorPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setIgnoreCursorEvents(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIgnoreCursorEvents", payload: e2 } } } });
  }
  async startDragging() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "startDragging" } } } });
  }
  async onResized(e2) {
    return this.listen("tauri://resize", (a3) => {
      a3.payload = f(a3.payload), e2(a3);
    });
  }
  async onMoved(e2) {
    return this.listen("tauri://move", (a3) => {
      a3.payload = v(a3.payload), e2(a3);
    });
  }
  async onCloseRequested(e2) {
    return this.listen("tauri://close-requested", (a3) => {
      let n = new y(a3);
      Promise.resolve(e2(n)).then(() => {
        if (!n.isPreventDefault())
          return this.close();
      });
    });
  }
  async onFocusChanged(e2) {
    let a3 = await this.listen("tauri://focus", (d3) => {
      e2({ ...d3, payload: true });
    }), n = await this.listen("tauri://blur", (d3) => {
      e2({ ...d3, payload: false });
    });
    return () => {
      a3(), n();
    };
  }
  async onScaleChanged(e2) {
    return this.listen("tauri://scale-change", e2);
  }
  async onMenuClicked(e2) {
    return this.listen("tauri://menu", e2);
  }
  async onFileDropEvent(e2) {
    let a3 = await this.listen("tauri://file-drop", (l2) => {
      e2({ ...l2, payload: { type: "drop", paths: l2.payload } });
    }), n = await this.listen("tauri://file-drop-hover", (l2) => {
      e2({ ...l2, payload: { type: "hover", paths: l2.payload } });
    }), d3 = await this.listen("tauri://file-drop-cancelled", (l2) => {
      e2({ ...l2, payload: { type: "cancel" } });
    });
    return () => {
      a3(), n(), d3();
    };
  }
  async onThemeChanged(e2) {
    return this.listen("tauri://theme-changed", e2);
  }
};
var y = class {
  constructor(e2) {
    this._preventDefault = false;
    this.event = e2.event, this.windowLabel = e2.windowLabel, this.id = e2.id;
  }
  preventDefault() {
    this._preventDefault = true;
  }
  isPreventDefault() {
    return this._preventDefault;
  }
};
var s3 = class extends b {
  constructor(e2, a3 = {}) {
    super(e2), (a3 == null ? void 0 : a3.skip) || a({ __tauriModule: "Window", message: { cmd: "createWebview", data: { options: { label: e2, ...a3 } } } }).then(async () => this.emit("tauri://created")).catch(async (n) => this.emit("tauri://error", n));
  }
  static getByLabel(e2) {
    return h().some((a3) => a3.label === e2) ? new s3(e2, { skip: true }) : null;
  }
  static async getFocusedWindow() {
    for (let e2 of h())
      if (await e2.isFocused())
        return e2;
    return null;
  }
};
var g;
"__TAURI_METADATA__" in window ? g = new s3(window.__TAURI_METADATA__.__currentWindow.label, { skip: true }) : (console.warn(`Could not find "window.__TAURI_METADATA__". The "appWindow" value will reference the "main" window label.
Note that this is not an issue if running this frontend on a browser instead of a Tauri window.`), g = new s3("main", { skip: true }));
function p(t) {
  return t === null ? null : { name: t.name, scaleFactor: t.scaleFactor, position: v(t.position), size: f(t.size) };
}
function v(t) {
  return new r(t.x, t.y);
}
function f(t) {
  return new o(t.width, t.height);
}
async function C() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "currentMonitor" } } } }).then(p);
}
async function T() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "primaryMonitor" } } } }).then(p);
}
async function D2() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "availableMonitors" } } } }).then((t) => t.map(p));
}
export {
  y as CloseRequestedEvent,
  c2 as LogicalPosition,
  m2 as LogicalSize,
  r as PhysicalPosition,
  o as PhysicalSize,
  W2 as UserAttentionType,
  s3 as WebviewWindow,
  u3 as WebviewWindowHandle,
  b as WindowManager,
  g as appWindow,
  D2 as availableMonitors,
  C as currentMonitor,
  h as getAll,
  E2 as getCurrent,
  T as primaryMonitor
};
//# sourceMappingURL=@tauri-apps_api_window.js.map
